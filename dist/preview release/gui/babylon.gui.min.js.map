{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_getTypeName","getClassName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","uniqueId","getScene","getUniqueId","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","strokeStyle","lineWidth","_renderHighlightSpecific","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","isVertical","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","onControlPickedObservable","premulAlpha","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_onFocusSelectAll","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","flag","valueAsString","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","BABYLON","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","rWord","right","search","clipboardData","setData","data","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","getChildrenAt","cell","_removeCell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","baseSlider_1","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n            context.clip();\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.onBeforeDrawObservable.hasObservers()) {\r\n                this.onBeforeDrawObservable.notifyObservers(this);\r\n            }\r\n\r\n            this._localDraw(context);\r\n            this._renderHighlight(context);\r\n\r\n            if (this.clipChildren) {\r\n                this._clipForChildren(context);\r\n            }\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    child._draw(this._measureForChildren, context);\r\n                    child._renderHighlight(context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./baseSlider\";\nexport * from \"./slider\";\nexport * from \"./imageBasedSlider\";\n\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new AdvancedDynamicTexture\r\n    * @param name defines the name of the texture\r\n    * @param width defines the width of the texture\r\n    * @param height defines the height of the texture\r\n    * @param scene defines the hosting scene\r\n    * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n    * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n    */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     * @returns current class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public get getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { Measure } from \"../measure\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _onFocusSelectAll = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._endHighlightIndex;\n                    }\n                    (this._startHighlightIndex < 0) ? 0 : --this._startHighlightIndex;\n                }\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                        this._endHighlightIndex = this._startHighlightIndex;\n                    }\n                    (this._endHighlightIndex > this._text.length) ? this._text.length - 1 : ++this._endHighlightIndex;\n                }\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this.deadKey = true;\n                break;\n        }\n        this._isTextHighlightOn = false;\n\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        for (let rWord = /\\w+/g, left = 1, right = 1; this._startHighlightIndex > 0 && this._endHighlightIndex < this._text.length && (left || right);) {\n            right = (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            left = (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        }\n        this.onTextHighlightObservable.notifyObservers(this);\n        this._isTextHighlightOn = true;\n        this._blinkIsEven = false;\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = false;\n        this._isTextHighlightOn = true;\n\n        //if already highlighted pass\n        if (this._highlightedText) {\n            return;\n        }\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = 0;\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this._processMeasures(parentMeasure, context)) {\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n\n            // Background\n            if (this._isFocused) {\n                if (this._focusedBackground) {\n                    context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                }\n            } else if (this._background) {\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            if (!this._fontOffset) {\n                this._fontOffset = Control._GetFontOffset(context.font);\n            }\n\n            // Text\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\n            if (this.color) {\n                context.fillStyle = this.color;\n            }\n\n            let text = this._beforeRenderText(this._text);\n\n            if (!this._isFocused && !this._text && this._placeholderText) {\n                text = this._placeholderText;\n\n                if (this._placeholderColor) {\n                    context.fillStyle = this._placeholderColor;\n                }\n            }\n\n            this._textWidth = context.measureText(text).width;\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\n            if (this._autoStretchWidth) {\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\n            }\n\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\n            context.save();\n            context.beginPath();\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n            context.clip();\n\n            if (this._isFocused && this._textWidth > availableWidth) {\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\n                if (!this._scrollLeft) {\n                    this._scrollLeft = textLeft;\n                }\n            } else {\n                this._scrollLeft = clipTextLeft;\n            }\n\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n            // Cursor\n            if (this._isFocused) {\n\n                // Need to move cursor\n                if (this._clickedCoordinate) {\n                    var rightPosition = this._scrollLeft + this._textWidth;\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                    var currentSize = 0;\n                    this._cursorOffset = 0;\n                    var previousDist = 0;\n                    do {\n                        if (this._cursorOffset) {\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                        }\n                        this._cursorOffset++;\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                    // Find closest move\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                        this._cursorOffset--;\n                    }\n\n                    this._blinkIsEven = false;\n                    this._clickedCoordinate = null;\n                }\n\n                // Render cursor\n                if (!this._blinkIsEven) {\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                    if (cursorLeft < clipTextLeft) {\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\n                        cursorLeft = clipTextLeft;\n                        this._markAsDirty();\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                        cursorLeft = clipTextLeft + availableWidth;\n                        this._markAsDirty();\n                    }\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n\n                clearTimeout(this._blinkTimeout);\n                this._blinkTimeout = <any>setTimeout(() => {\n                    this._blinkIsEven = !this._blinkIsEven;\n                    this._markAsDirty();\n                }, 500);\n\n                //show the highlighted text\n                if (this._isTextHighlightOn) {\n                    clearTimeout(this._blinkTimeout);\n                    let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                    let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                    this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                    //for transparancy\n                    context.globalAlpha = this._highligherOpacity;\n                    context.fillStyle = this._textHighlightColor;\n                    context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width, this._fontOffset.height);\n                    context.globalAlpha = 1.0;\n                }\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Measure } from \"../measure\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            var radius = 0;\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this.isVertical) {\r\n                    top += (this._effectiveThumbThickness / 2);\r\n                }\r\n                else {\r\n                    left += (this._effectiveThumbThickness / 2);\r\n                }\r\n\r\n                radius = this._backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            const thumbPosition = this._getThumbPosition();\r\n            context.fillStyle = this._background;\r\n\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            // Value bar\r\n            context.fillStyle = this.color;\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowColor = this.shadowColor;\r\n                    context.shadowBlur = this.shadowBlur;\r\n                    context.shadowOffsetX = this.shadowOffsetX;\r\n                    context.shadowOffsetY = this.shadowOffsetY;\r\n                }\r\n                if (this._isThumbCircle) {\r\n                    context.beginPath();\r\n                    if (this.isVertical) {\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                    }\r\n                    else {\r\n                        context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    }\r\n                    context.fill();\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    context.stroke();\r\n                }\r\n                else {\r\n                    if (this.isVertical) {\r\n                        context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    if (this.isVertical) {\r\n                        context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size &&\r\n            y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = x - centerX;\r\n        var dy = y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(x, y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    protected _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../measure\";\r\nimport { Image } from \"./image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(\"rectangle\");\r\n            const thumbPosition = this._getThumbPosition();\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            // Background\r\n            if (this._backgroundImage) {\r\n                this._tempMeasure.copyFromFloats(left, top, width, height);\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    if (this.isVertical) {\r\n                        this._tempMeasure.height += this._effectiveThumbThickness;\r\n                    } else {\r\n                        this._tempMeasure.width += this._effectiveThumbThickness;\r\n                    }\r\n                }\r\n                this._backgroundImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Bar\r\n            if (this._valueBarImage) {\r\n                if (this.isVertical) {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    } else {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                } else {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                    }\r\n                    else {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                this._valueBarImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                this._thumbImage._draw(this._tempMeasure, context);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}