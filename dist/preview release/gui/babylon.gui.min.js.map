{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_wasDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","_rebuildLayout","_isClipped","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","useBitmapCache","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_markMatrixAsDirty","toString","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","parent","_reOrderControl","_linkedMesh","left","top","getAscendantOfClass","className","isAscendant","container","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","uniqueId","getScene","getUniqueId","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_layout","parentMeasure","isVisible","rebuildCount","_processMeasures","BABYLON","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","beginPath","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","clip","_render","_cacheData","putImageData","_draw","getImageData","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","updateInPlace","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control_1","Container","_super","_children","_measureForChildren","_background","_adaptWidthToChildren","_adaptHeightToChildren","__extends","_i","_a","children","getChildByName","child","getChildByType","typeName","containsControl","control","addControl","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","shadowColor","fillRect","_beforeLayout","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","item","_changeCursor","control3D_1","Container3D","_blockLayout","_arrangeChildren","updateLayout","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_breakLines","maxLineWidth","line","newWidth","paddingLeftInPixels","paddingRightInPixels","internalValue","newHeight","paddingTopInPixels","paddingBottomInPixels","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","refWidth","lines","split","Ellipsis","_lines_1","_line","_parseLineEllipsis","WordWrap","_lines_2","apply","_parseLineWordWrap","_b","_lines_3","_parseLine","measureText","words","testLine","testWidth","rootY","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","isVertical","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","__export","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","_populateNinePatchSlicesFromImage","onImageLoadedObservable","_extractNinePatchSliceDataFromImage","_sliceLeft","_sliceRight","_sliceTop","_sliceBottom","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_WorkingCanvas","canvas","drawImage","imageData","data","_source","SetCorsBehavior","src","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_EXTEND","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","hRatio","vRatio","ratio","centerX","centerY","STRETCH_NINE_PATCH","_renderNinePatch","_renderCornerPatch","targetX","targetY","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","targetCenterWidth","sliceLeft","targetTopHeight","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","onControlPickedObservable","premulAlpha","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","update","clearRect","measure","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","alphaStore","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","availableWidth","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","InputText","_placeholderText","_focusedBackground","_focusedColor","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","flag","valueAsString","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","rWord","search","_clickedCoordinate","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","charAt","focusedColor","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","image","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","Ellipse","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","grid_1","scrollViewerWindow_1","scrollBar_1","ScrollViewer","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ScrollBar","_verticalBar","_window","_ScrollViewerWindow","barOffset","_endTop","_endLeft","barColor","barBackground","resetWindow","_buildClientSizes","parentClientWidth","parentClientHeight","_clientWidth","_clientHeight","_updateScroller","_barBackground","windowContentsWidth","windowContentsHeight","horizontalMultiplicator","verticalMultiplicator","thumbWidth","_attachWheel","_onPointerObserver","POINTERWHEEL","deltaY","deltaX","maxWidth","maxHeight","baseSlider_1","_thumbMeasure","_first","_originX","_originY","delta","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _isDirty = true;\r\n    /** @hidden */\r\n    protected _wasDirty = false;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @hidden */\r\n    public _isClipped = false;\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = 'black';\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        if (!this._fontSet) {\r\n            return \"\";\r\n        }\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        let rebuildCount = 0;\r\n        do {\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Control uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this.parent && this.parent.clipChildren) {\r\n            // Early clip\r\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _render(context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Container uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            child._render(context);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length;\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        } else if (!this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                stackHeight += child._currentMeasure.height + child.paddingTopInPixels;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                stackWidth += child._currentMeasure.width + child.paddingLeftInPixels;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./scrollViewers/scrollViewer\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./sliders/baseSlider\";\nexport * from \"./sliders/slider\";\nexport * from \"./sliders/imageBasedSlider\";\n\nexport * from \"./statics\";","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"2D\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private static _WorkingCanvas: Nullable<HTMLCanvasElement> = null;\r\n\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        if (!Image._WorkingCanvas) {\r\n            Image._WorkingCanvas = document.createElement('canvas');\r\n        }\r\n        const canvas = Image._WorkingCanvas;\r\n        const context = canvas.getContext('2d')!;\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (var x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (var y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderCornerPatch(context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, targetX: number, targetY: number): void {\r\n        context.drawImage(this._domImage, x, y, width, height, this._currentMeasure.left + targetX, this._currentMeasure.top + targetY, width, height);\r\n    }\r\n\r\n    private _renderNinePatch(context: CanvasRenderingContext2D): void {\r\n        let height = this._imageHeight;\r\n        let leftWidth = this._sliceLeft;\r\n        let topHeight = this._sliceTop;\r\n        let bottomHeight = this._imageHeight - this._sliceBottom;\r\n        let rightWidth = this._imageWidth - this._sliceRight;\r\n        let left = 0;\r\n        let top = 0;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            left = 1;\r\n            top = 1;\r\n            height -= 2;\r\n            leftWidth -= 1;\r\n            topHeight -= 1;\r\n            bottomHeight -= 1;\r\n            rightWidth -= 1;\r\n        }\r\n\r\n        const centerWidth = this._sliceRight - this._sliceLeft + 1;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - this.sliceLeft + 1;\r\n        const targetTopHeight = this._currentMeasure.height - height + this._sliceBottom;\r\n\r\n        // Corners\r\n        this._renderCornerPatch(context, left, top, leftWidth, topHeight, 0, 0);\r\n        this._renderCornerPatch(context, left, this._sliceBottom, leftWidth, height - this._sliceBottom, 0, targetTopHeight);\r\n\r\n        this._renderCornerPatch(context, this._sliceRight, top, rightWidth, topHeight, this._currentMeasure.width - rightWidth, 0);\r\n        this._renderCornerPatch(context, this._sliceRight, this._sliceBottom, rightWidth, height - this._sliceBottom, this._currentMeasure.width - rightWidth, targetTopHeight);\r\n\r\n        // Center\r\n        context.drawImage(this._domImage, this._sliceLeft, this._sliceTop, centerWidth, this._sliceBottom - this._sliceTop + 1,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + topHeight, targetCenterWidth, targetTopHeight - topHeight + 1);\r\n\r\n        // Borders\r\n        context.drawImage(this._domImage, left, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceRight, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left + this._currentMeasure.width - rightWidth, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceLeft, top, centerWidth, topHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceLeft, this._sliceBottom, centerWidth, bottomHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + targetTopHeight, targetCenterWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new AdvancedDynamicTexture\r\n    * @param name defines the name of the texture\r\n    * @param width defines the width of the texture\r\n    * @param height defines the height of the texture\r\n    * @param scene defines the hosting scene\r\n    * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n    * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n    */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._layout(measure, context);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        this._rootContainer._render(context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            let viewport = camera!.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\r\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _focusedColor = \"white\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _cursorIndex = -1;\n    private _onFocusSelectAll = false;\n    private _isPointerDown = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n    /** Observable raised when a key event was processed */\n    public onKeyboardEventProcessedObservable = new Observable<KeyboardEvent>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedColor(): string {\n        return this._focusedColor;\n    }\n\n    public set focusedColor(value: string) {\n        if (this._focusedColor === value) {\n            return;\n        }\n\n        this._focusedColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this._isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._text.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._text.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset >= this._text.length) ? this._text.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = (this._startHighlightIndex === 0) ? this._text.length : this._text.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._startHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this.text.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._text.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset <= 0) ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = (this._text.length === this._endHighlightIndex) ? 0 : this._text.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._endHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._cursorIndex = -1;\n                this.deadKey = true;\n                break;\n        }\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + key + this._text.slice(this._endHighlightIndex);\n                    this._cursorOffset = this.text.length - (this._startHighlightIndex + 1);\n                    this._isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    private _updateValueFromCursorIndex(offset: number) {\n        //update the cursor\n        this._blinkIsEven = false;\n\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        } else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorIndex;\n                this._startHighlightIndex = this._text.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorOffset;\n                this._startHighlightIndex = this._text.length - this._cursorIndex;\n            }\n            else {\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this._isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let rWord = /\\w+/g, moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._text.length && (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            moveLeft = this._startHighlightIndex > 0 && (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n\n        this._isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = true;\n        this._isTextHighlightOn = true;\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = this._text.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._text);\n\n        if (!this._isFocused && !this._text && this._placeholderText) {\n            text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width = width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(this.text.charAt(this.text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n        }\n        context.restore();\n\n        // Border\n        if (this._thickness) {\n            if (this._isFocused) {\n                if (this.focusedColor) {\n                    context.strokeStyle = this.focusedColor;\n                }\n            } else {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n            }\n\n            context.lineWidth = this._thickness;\n\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n        }\n\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\nimport { Measure } from \"../measure\";\n\n/** Class used to create color pickers */\nexport class ColorPicker extends Control {\n    private static _Epsilon = 0.000001;\n    private _colorWheelCanvas: HTMLCanvasElement;\n\n    private _value: Color3 = Color3.Red();\n    private _tmpColor = new Color3();\n\n    private _pointerStartedOnSquare = false;\n    private _pointerStartedOnWheel = false;\n\n    private _squareLeft = 0;\n    private _squareTop = 0;\n    private _squareSize = 0;\n\n    private _h = 360;\n    private _s = 1;\n    private _v = 1;\n\n    /**\n     * Observable raised when the value changes\n     */\n    public onValueChangedObservable = new Observable<Color3>();\n\n    /** Gets or sets the color of the color picker */\n    public get value(): Color3 {\n        return this._value;\n    }\n\n    public set value(value: Color3) {\n        if (this._value.equals(value)) {\n            return;\n        }\n\n        this._value.copyFrom(value);\n\n        this._RGBtoHSV(this._value, this._tmpColor);\n\n        this._h = this._tmpColor.r;\n        this._s = Math.max(this._tmpColor.g, 0.00001);\n        this._v = Math.max(this._tmpColor.b, 0.00001);\n\n        this._markAsDirty();\n\n        if (this._value.r <= ColorPicker._Epsilon) {\n            this._value.r = 0;\n        }\n\n        if (this._value.g <= ColorPicker._Epsilon) {\n            this._value.g = 0;\n        }\n\n        if (this._value.b <= ColorPicker._Epsilon) {\n            this._value.b = 0;\n        }\n\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\n            this._value.r = 1.0;\n        }\n\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\n            this._value.g = 1.0;\n        }\n\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\n            this._value.b = 1.0;\n        }\n\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n\n    /**\n     * Gets or sets control width\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._height.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    /** Gets or sets control height */\n    public set height(value: string | number) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._width.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control size */\n    public get size(): string | number {\n        return this.width;\n    }\n\n    public set size(value: string | number) {\n        this.width = value;\n    }\n\n    /**\n     * Creates a new ColorPicker\n     * @param name defines the control name\n     */\n    constructor(public name?: string) {\n        super(name);\n        this.value = new Color3(.88, .1, .1);\n        this.size = \"200px\";\n        this.isPointerBlocker = true;\n    }\n\n    protected _getTypeName(): string {\n        return \"ColorPicker\";\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n\n        if (parentMeasure.width < parentMeasure.height) {\n            this._currentMeasure.height = parentMeasure.width;\n        } else {\n            this._currentMeasure.width = parentMeasure.height;\n        }\n    }\n\n    private _updateSquareProps(): void {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var innerDiameter = (radius - wheelThickness) * 2;\n        var squareSize = innerDiameter / (Math.sqrt(2));\n        var offset = radius - squareSize * .5;\n\n        this._squareLeft = this._currentMeasure.left + offset;\n        this._squareTop = this._currentMeasure.top + offset;\n        this._squareSize = squareSize;\n    }\n\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\n        var lgh = context.createLinearGradient(left, top, width + left, top);\n        lgh.addColorStop(0, '#fff');\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\n\n        context.fillStyle = lgh;\n        context.fillRect(left, top, width, height);\n\n        var lgv = context.createLinearGradient(left, top, left, height + top);\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\n        lgv.addColorStop(1, '#000');\n\n        context.fillStyle = lgv;\n        context.fillRect(left, top, width, height);\n    }\n\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#333333';\n        context.stroke();\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#ffffff';\n        context.stroke();\n    }\n\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = radius * 2;\n        canvas.height = radius * 2;\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\n        var data = image.data;\n\n        var color = this._tmpColor;\n        var maxDistSq = radius * radius;\n        var innerRadius = radius - thickness;\n        var minDistSq = innerRadius * innerRadius;\n\n        for (var x = -radius; x < radius; x++) {\n            for (var y = -radius; y < radius; y++) {\n\n                var distSq = x * x + y * y;\n\n                if (distSq > maxDistSq || distSq < minDistSq) {\n                    continue;\n                }\n\n                var dist = Math.sqrt(distSq);\n                var ang = Math.atan2(y, x);\n\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\n\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\n\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                //apply less alpha to bigger color pickers\n                var alphaAmount = .2;\n                var maxAlpha = .2;\n                var minAlpha = .04;\n                var lowerRadius = 50;\n                var upperRadius = 150;\n\n                if (radius < lowerRadius) {\n                    alphaAmount = maxAlpha;\n                } else if (radius > upperRadius) {\n                    alphaAmount = minAlpha;\n                } else {\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\n                }\n\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                if (alphaRatio < alphaAmount) {\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\n                } else if (alphaRatio > 1 - alphaAmount) {\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\n                } else {\n                    data[index + 3] = 255;\n                }\n\n            }\n        }\n\n        context.putImageData(image, 0, 0);\n\n        return canvas;\n    }\n\n    private _RGBtoHSV(color: Color3, result: Color3) {\n        var r = color.r;\n        var g = color.g;\n        var b = color.b;\n\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h = 0;\n        var s = 0;\n        var v = max;\n\n        var dm = max - min;\n\n        if (max !== 0) {\n            s = dm / max;\n        }\n\n        if (max != min) {\n            if (max == r) {\n                h = (g - b) / dm;\n                if (g < b) {\n                    h += 6;\n                }\n            } else if (max == g) {\n                h = (b - r) / dm + 2;\n            } else if (max == b) {\n                h = (r - g) / dm + 4;\n            }\n            h *= 60;\n        }\n\n        result.r = h;\n        result.g = s;\n        result.b = v;\n    }\n\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\n        var chroma = value * saturation;\n        var h = hue / 60;\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\n        var r = 0;\n        var g = 0;\n        var b = 0;\n\n        if (h >= 0 && h <= 1) {\n            r = chroma;\n            g = x;\n        } else if (h >= 1 && h <= 2) {\n            r = x;\n            g = chroma;\n        } else if (h >= 2 && h <= 3) {\n            g = chroma;\n            b = x;\n        } else if (h >= 3 && h <= 4) {\n            g = x;\n            b = chroma;\n        } else if (h >= 4 && h <= 5) {\n            r = x;\n            b = chroma;\n        } else if (h >= 5 && h <= 6) {\n            r = chroma;\n            b = x;\n        }\n\n        var m = value - chroma;\n        result.set((r + m), (g + m), (b + m));\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var left = this._currentMeasure.left;\n        var top = this._currentMeasure.top;\n\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\n        }\n\n        this._updateSquareProps();\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\n        }\n\n        context.drawImage(this._colorWheelCanvas, left, top);\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        this._drawGradientSquare(this._h,\n            this._squareLeft,\n            this._squareTop,\n            this._squareSize,\n            this._squareSize,\n            context);\n\n        var cx = this._squareLeft + this._squareSize * this._s;\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\n\n        this._drawCircle(cx, cy, radius * .04, context);\n\n        var dist = radius - wheelThickness * .5;\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\n\n        context.restore();\n    }\n\n    // Events\n    private _pointerIsDown = false;\n\n    private _updateValueFromPointer(x: number, y: number): void {\n        if (this._pointerStartedOnWheel) {\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n            var centerX = radius + this._currentMeasure.left;\n            var centerY = radius + this._currentMeasure.top;\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\n        }\n        else if (this._pointerStartedOnSquare) {\n            this._updateSquareProps();\n            this._s = (x - this._squareLeft) / this._squareSize;\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\n            this._s = Math.min(this._s, 1);\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\n            this._v = Math.min(this._v, 1);\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\n        }\n\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\n\n        this.value = this._tmpColor;\n    }\n\n    private _isPointOnSquare(x: number, y: number): boolean {\n        this._updateSquareProps();\n\n        var left = this._squareLeft;\n        var top = this._squareTop;\n        var size = this._squareSize;\n\n        if (x >= left && x <= left + size &&\n            y >= top && y <= top + size) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _isPointOnWheel(x: number, y: number): boolean {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var centerX = radius + this._currentMeasure.left;\n        var centerY = radius + this._currentMeasure.top;\n        var wheelThickness = radius * .2;\n        var innerRadius = radius - wheelThickness;\n        var radiusSq = radius * radius;\n        var innerRadiusSq = innerRadius * innerRadius;\n\n        var dx = x - centerX;\n        var dy = y - centerY;\n\n        var distSq = dx * dx + dy * dy;\n\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._pointerIsDown = true;\n\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._isPointOnSquare(x, y)) {\n            this._pointerStartedOnSquare = true;\n        } else if (this._isPointOnWheel(x, y)) {\n            this._pointerStartedOnWheel = true;\n        }\n\n        this._updateValueFromPointer(x, y);\n        this._host._capturingControl[pointerId] = this;\n\n        return true;\n    }\n\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._pointerIsDown) {\n            this._updateValueFromPointer(x, y);\n        }\n\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        this._pointerIsDown = false;\n\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                context.lineTo(point._point.x, point._point.y);\r\n            }\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { PointerInfo, Observer, Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture, Measure } from \"2D\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar;\r\n    private _verticalBar: ScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barSize: number = 20;\r\n    private _endLeft: number;\r\n    private _endTop: number;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        this._horizontalBar = new ScrollBar();\r\n        this._verticalBar = new ScrollBar();\r\n\r\n        this._window = new _ScrollViewerWindow();\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBar.paddingLeft = 0;\r\n        this._verticalBar.width = \"100%\";\r\n        this._verticalBar.height = \"100%\";\r\n        this._verticalBar.barOffset = 0;\r\n        this._verticalBar.value = 0;\r\n        this._verticalBar.maximum = 1;\r\n        this._verticalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.isVertical = true;\r\n        this._verticalBar.rotation = Math.PI;\r\n        this._verticalBar.isVisible = false;\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._verticalBarSpace.addControl(this._verticalBar);\r\n\r\n        this._verticalBar.onValueChangedObservable.add((value) => {\r\n            this._window.top = value * this._endTop + \"px\";\r\n        });\r\n\r\n        this._horizontalBar.paddingLeft = 0;\r\n        this._horizontalBar.width = \"100%\";\r\n        this._horizontalBar.height = \"100%\";\r\n        this._horizontalBar.barOffset = 0;\r\n        this._horizontalBar.value = 0;\r\n        this._horizontalBar.maximum = 1;\r\n        this._horizontalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.isVisible = false;\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._horizontalBarSpace.addControl(this._horizontalBar);\r\n\r\n        this._horizontalBar.onValueChangedObservable.add((value) => {\r\n            this._window.left = value * this._endLeft + \"px\";\r\n        });\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        this.barColor = \"grey\";\r\n        this.barBackground = \"transparent\";\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        this._horizontalBar.background = color;\r\n        this._verticalBar.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && windowContentsWidth > this._clientWidth) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && windowContentsHeight > this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n        this._endLeft = this._clientWidth - windowContentsWidth;\r\n        this._endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        let horizontalMultiplicator = this._clientWidth / windowContentsWidth;\r\n        let verticalMultiplicator = this._clientHeight / windowContentsHeight;\r\n\r\n        this._horizontalBar.thumbWidth = (this._clientWidth * horizontalMultiplicator) + \"px\";\r\n        this._verticalBar.thumbWidth = (this._clientHeight * verticalMultiplicator) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (this._onPointerObserver) {\r\n            return;\r\n        }\r\n\r\n        let scene = this._host.getScene();\r\n        this._onPointerObserver = scene!.onPointerObservable.add((pi, state) => {\r\n            if (!this._pointerIsOver || pi.type !== BABYLON.PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaY < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaY > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaX < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaX > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        let scene = this._host.getScene();\r\n        if (scene && this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver = null;\r\n        }\r\n        super.dispose();\r\n    }\r\n}","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"..\";\r\nimport { Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._thumbMeasure.left = left - this._effectiveBarOffset;\r\n            this._thumbMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._thumbMeasure.width = this._currentMeasure.width;\r\n            this._thumbMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._thumbMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._thumbMeasure.top = this._currentMeasure.top;\r\n            this._thumbMeasure.width = this._effectiveThumbThickness;\r\n            this._thumbMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._thumbMeasure.left, this._thumbMeasure.top, this._thumbMeasure.width, this._thumbMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._thumbMeasure.left || x > this._thumbMeasure.left + this._thumbMeasure.width || y < this._thumbMeasure.top || y > this._thumbMeasure.top + this._thumbMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}