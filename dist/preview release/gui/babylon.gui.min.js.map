{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/control.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/container3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/container.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/measure.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/image.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/control3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/button3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/button.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/math2D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/inputText.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/slider.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/style.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/legacy.ts","webpack://BABYLON.GUI/../node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/grid.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/line.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/selector.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/statics.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/materials/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","_isFontSizeInPercentage","font","fillStyle","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","context_1","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","other","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","premulAlpha","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","isVertical","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","_connectedVirtualKeyboard","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","onValueChangedObservable","_pointerIsDown","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","_updateValueFromPointer","rotation","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","BABYLON","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","minimum","maximum","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n            context.clip();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            if (this.clipChildren) {\r\n                this._clipForChildren(context);\r\n            }\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./selector\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** @hidden */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical) {\r\n                    top += (effectiveThumbThickness / 2);\n                }\r\n                else {\r\n                    left += (effectiveThumbThickness / 2);\n                }\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}